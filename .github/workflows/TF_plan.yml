name: "Terraform-Plan-Infra-Plan"

on:
  push:
    branches:
      - Plan

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform init -upgrade

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'push'
        run: terraform plan -no-color

      - name: Check for State Lock Error
        id: check_lock
        # This step only runs if the plan step failed
        if: ${{ failure() && steps.plan.outcome == 'failure' }}
        run: |
          # The ID is the most reliable way to force-unlock.
          # The 'terraform plan' output usually contains the lock ID.
          # In a real scenario, you'd need a more robust way to capture the ID,
          # possibly by checking the lock metadata in the Azure Storage blob.
          
          # For a quick fix, if you manually know the lock ID from the previous failure:
          LOCK_ID="f7b8832b-9f50-6ce8-9517-279a25ec747f" # Replace with actual lock ID

          echo "Attempting to force-unlock state..."
          terraform force-unlock $LOCK_ID
          
          # We exit here so the subsequent steps (like apply) don't run prematurely
          # and so the overall job still fails, indicating manual review is needed.
          exit 1 